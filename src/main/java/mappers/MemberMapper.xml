<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MemberMAP">


	<insert id="insertMember" parameterType="member">
		INSERT INTO member
		(m_id, m_pw, m_name, gender, email, birth, tel, w_date, state, enabled, coin)
		VALUES
		(#{m_id},#{m_pw},#{m_name},#{gender},#{email},#{birth},#{tel},sysdate(),'normal',1, '0')
	</insert>
	
	<select id="checkUniqueId" parameterType="member" resultType="member">
		SELECT * FROM member
		WHERE m_id=#{m_id}
	</select>
	
	<select id="checkAuth" parameterType="member" resultType="String">
		SELECT auth FROM auth
		WHERE m_id=#{m_id}
	</select>

	<select id="selectByGoogle" parameterType="member"	resultType="member">
		SELECT * FROM member
		WHERE google=#{google}
	</select>
	
	<select id="selectByEmail" parameterType="member" resultType="member">
		SELECT * FROM member
		WHERE email=#{email}
	</select>

	<update id="addGoogle" parameterType="member">
		UPDATE member SET
		google = #{google}
		WHERE m_id = #{m_id}
	</update>	
	
	<select id="coinView" parameterType="String" resultType="hashmap">
		<!--
		SELECT * FROM coin
		 -->
		SELECT M_ID, DATE_FORMAT(DAY, '%Y-%m-%d') AS DAY, PRICE, COIN FROM coin
		WHERE m_id=#{m_id}
	</select>	
	<!-- ROLE_USER인 모든 데이터를 불러 옴 -->
	<select id="allMember" resultType="hashmap">
      SELECT member.*, auth.* FROM member, auth
      WHERE member.m_id=auth.m_id AND auth.auth='ROLE_USER'
      ORDER BY w_date DESC
   	</select>
   	
	<!-- 인자로 전달 받은 id와 일치하는 id의 데이터를 모두 불러옴 -->
   	<select id="pickUserById" parameterType="string" resultType="member">
		SELECT * FROM member
		WHERE m_id=#{m_id}
	</select>
	
	<!-- member테이블에서 인자로 전달 받은 id와 일치하는 id의 데이터를 update -->
	<update id="updateMember" parameterType="member">
		UPDATE member
		SET m_name=#{m_name},
			gender=#{gender},
			email=#{email},
			tel=#{tel},
			birth=#{birth}
		WHERE m_id=#{m_id}
		
	</update>
	
	<!-- 프로필 사진 update -->
	
	<update id="updatePhoto"  parameterType="member">
		UPDATE member 
		SET	photo = #{photo}
		WHERE m_id = #{m_id}
	</update>
	
	<!-- ROLE_ADMIN인 모든 데이터를 불러옴 -->
	<select id="allAdmin" resultType="hashmap">
      SELECT member.*, auth.* FROM member, auth
      WHERE member.m_id=auth.m_id AND auth.auth='ROLE_ADMIN'
   	</select>
   	   	
   	<!-- 인자로 전달 받은 id와 일치하는 id의 데이터의 auth 값을 ROLE_ADMIN으로 update -->
   	<update id="updateUserEtc" parameterType="member">
		UPDATE member
		SET etc=#{etc}
		WHERE m_id=#{m_id}
		
	</update>
   	
   	<!-- 인자로 전달 받은 id와 일치하는 id의 데이터의 auth 값을 ROLE_ADMIN으로 update -->
   	<update id="updateAuthAdmin" parameterType="string">
		UPDATE auth
		SET auth='ROLE_ADMIN'
		WHERE m_id=#{m_id}
		
	</update>
	
	<!-- 인자로 전달 받은 id와 일치하는 id의 데이터의 auth 값을 ROLE_USER으로 update -->
	<update id="updateAuthUser" parameterType="string">
		UPDATE auth
		SET auth='ROLE_USER'
		WHERE m_id=#{m_id}
		
	</update>
	
	<!-- member 테이블에서 state값이 black인 모든 데이터를 불러옴 -->
	<select id="allBlacklist" resultType="hashmap">
      SELECT * FROM member
      WHERE state='black'
   	</select>
   	
   	<!-- 인자로 전달 받은 id와 일치하는 id의 데이터의 state 값을 black으로 update -->  
   	<update id="setBlacklist" parameterType="string">
		UPDATE member
		SET state='black'
		WHERE m_id=#{m_id}
		
	</update>
	
	<!-- 인자로 전달 받은 id와 일치하는 id의 데이터의 state 값을 normal으로 update -->
	<update id="setNormal" parameterType="string">
		UPDATE member
		SET state='normal'
		WHERE m_id=#{m_id}
		
	</update>  
	
	
	
	<!-- 내가 쓴 판매글 전체  select-->
	<select id="selectAllsale" resultType="hashmap">
      SELECT * FROM sell
      WHERE m_id=#{m_id}
	ORDER BY w_date DESC		
	
   	</select>
   	
   	
   	<!-- 내가 쓴 판매글 필터 select  select-->
	<select id="selectMySale" parameterType="hashmap" resultType="hashmap">
		
		SELECT * FROM sell 
		WHERE m_id=#{m_id} AND 
		<![CDATA[
		w_date >= str_to_date(#{startDate}, '%Y-%m-%d') AND
		w_date <= str_to_date(#{endDate}, '%Y-%m-%d')
		]]>
	    <if test="statusList != null and statusList != ''">
	     AND status IN 
	     <foreach collection="statusList" item="status" separator="," open="(" close=")">
	      #{status}
	     </foreach>
	    </if>
		<if test="byTitle != null and byTitle != ''">
				AND
				title LIKE CONCAT('%',#{byTitle},'%')
		</if> 
		<![CDATA[
		ORDER BY w_date DESC
		]]>
	</select>
	
	
	   	<!--admin 판매 리스트 select  select-->
	<select id="selectSale_admin" parameterType="hashmap" resultType="hashmap">
		
		SELECT * FROM sell
		WHERE
		<if test="startDate != null and endDate != null ">		
		<![CDATA[
		w_date >= str_to_date(#{startDate}, '%Y-%m-%d') AND
		w_date <= str_to_date(#{endDate}, '%Y-%m-%d')
		]]>
		</if>
		<if test="startDate == null and endDate != null ">
		<![CDATA[
		w_date <= str_to_date(#{endDate}, '%Y-%m-%d')
		]]>
		</if>
		<if test="endDate == null  and startDate != null">
		<![CDATA[
		w_date >= str_to_date(#{startDate}, '%Y-%m-%d')
		]]>
		</if>
	    <if test="status != null and status != '상태선택' ">
	     AND status = #{status}
	    </if>
	    
		<if test="byTitle != null and byTitle != '' and byTitle != 'undefined' ">
				AND
				title LIKE CONCAT('%',#{byTitle},'%')
		</if> 
		<![CDATA[
		ORDER BY w_date DESC
		]]>
	</select>
	
	
		<!-- admin 등록대기->등록 -->
	<update id="setPosting" parameterType="sales">
		UPDATE sell
		SET status='게시중'
		WHERE sell_id=#{sell_id}
		
	</update>
	
	<!-- admin 등록대기 -> 반려 변경 -->
	<update id="returnPosting" parameterType="sales">
		UPDATE sell
		SET status='반려' 
		WHERE sell_id=#{sell_id}
	</update>
	
	
	<!-- 2주 지난 게시물 삭제 -->
	
	<update id="expiredPosting" parameterType="sales">
		UPDATE sell
		SET status='게시종료'
		WHERE sell_id=#{sell_id}
	</update>
	

	
	
</mapper>